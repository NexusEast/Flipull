 
    class Animation
    {
    public:
        static const std::string NONE;
        static const std::string SAME_LAYER;
        static const std::string SAME_GROUP;
        static const std::string SAME_LAYER_AND_GROUP;
        static const std::string ALL;
        
        /**
         * Whether animation tweening is enabled or not.
         */
        bool tweenEnabled;
        
        /** @private */
        std::vector<std::vector<AnimationState*>* > _animationLayer;
        
        Armature* _armature;
        bool _isActive;
       
       
        const std::vector<std::string> &getMovementList();
        
        /**
         * The name of the last AnimationData played.
         * @see dragonBones.objects.animationData->
         */
        const std::string &getMovementID();
        
        AnimationState *_lastAnimationState;
        /**
         * The last AnimationData this Animation played.
         * @see dragonBones.objects.animationData->
         */
        AnimationState *getLastAnimationState();
        
        std::vector<std::string> _animationList;
        /**
         * An vector containing all AnimationData names the Animation can play.
         * @see dragonBones.objects.animationData->
         */
        const std::vector<std::string> &getAnimationList();
        
        bool _isPlaying;
        bool getIsPlaying();
        bool getIsComplete();
        
        std::vector<AnimationData*> _animationDataList;
        /**
         * The AnimationData list associated with this Animation instance.
         * @see dragonBones.objects.animationData->
         */
        const std::vector<AnimationData*>& getAnimationDataList();
        void setAnimationDataList(const std::vector<AnimationData*> &value);
        
        float _timeScale;
        /**
         * The amount by which passed time should be scaled. Used to slow down or speed up animations. Defaults to 1.
         */
        float getTimeScale();
        void setTimeScale(float value);
        
        /**
         * Creates a new Animation instance and attaches it to the passed Armature.
         * @param    An Armature to attach this Animation instance to.
         */
        Animation(Armature *armature);
        
        /**
         * Qualifies all resources used by this Animation instance for garbage collection.
         */
        void dispose();
        
        /**
         * Move the playhead to that AnimationData
         * @param animationName The name of the AnimationData to play.
         * @param fadeInTime A fade time to apply (> 0)
         * @param duration The duration of that animationData->
         * @param loop Loop(0:loop forever, 1~+∞:loop times, -1~-∞:will fade animation after loop complete).
         * @param layer The layer of the animation.
         * @param group The group of the animation.
         * @param fadeOutMode Fade out mode.
         * @param displayControl Display control.
         * @param pauseFadeOut Pause other animation playing.
         * @param pauseFadeIn Pause this animation playing before fade in complete.
         * @see dragonBones.objects.animationData->
         * @see dragonBones.animation.animationState->
         */
        AnimationState* gotoAndPlay(
            const std::string &animationName, 
            float fadeInTime , 
            float duration , 
            float loop , 
            uint layer , 
            const std::string &group ,
            const std::string &fadeOutMode ,
            bool displayControl ,
            bool pauseFadeOut ,
            bool pauseFadeIn 
        );
        
        /**
         * Play the animation from the current position.
         */
        void play();
        
        void stop();
        
        /**
         * Returns the AnimationState named name.
         * @return A AnimationState instance.
         * @see dragonBones.animation.animationState->
         */
        AnimationState* getState(const std::string &name, uint layer);
        
        bool hasAnimation(const std::string &animationName);
        
        void advanceTime(float passedTime);
        
        /** @private */
        void setActive(AnimationState *animationState, bool active);
        
        uint addLayer(uint layer);
        
        void addState(AnimationState *animationState);
        
        void removeState(AnimationState *animationState);
    }; 
